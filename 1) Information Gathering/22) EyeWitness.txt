âœ… Acknowledgement: EyeWitness â€“ Kali Linux

ðŸ”— Official tool page: https://www.kali.org/tools/eyewitness

â¸»

1) What is EyeWitness?
EyeWitness is a reconnaissance and reporting utility in Kali Linux.
It automates visiting web targets to take screenshots, collect server headers and metadata, and generate an organized HTML report.
It is commonly used by penetration testers and security analysts to visually triage large numbers of web applications.

â¸»

2) Why use EyeWitness?
â€¢ Visual Recon â†’ Quickly see what many domains/hosts look like without manually visiting each site.
â€¢ Efficiency â†’ Automates screenshots and metadata collection for large target lists.
â€¢ Vulnerability Auditing â†’ Helps spot default login pages, exposed admin interfaces, and misconfigurations.
â€¢ Reporting â†’ Produces an easy-to-share HTML report with thumbnails and details for teams or clients.

â¸»

3) How does EyeWitness work?
1. Input: Accepts a line-separated list of URLs, or nmap/Nessus XML.
2. Renderer: Uses Selenium with geckodriver (Firefox) to open each page.
3. Capture: Takes a screenshot and collects HTTP response headers and basic metadata.
4. Report: Compiles results into an HTML report containing thumbnails, host details, and notes.

â¸»

4) Exact Use Case (Lab Example)

Context:
- File: /root/urls.txt containing:
https://www.kali.org
https://www.kali.org/docs
https://www.kali.org/tools
https://www.exploit-db.com
https://www.offsec.com

Command:
eyewitness -f /root/urls.txt -d screens --headless

Flags explained:
â€¢ -f â†’ Input file containing URLs (line-separated).
â€¢ -d â†’ Directory to store screenshots and report.
â€¢ --headless â†’ Run browser without a visible GUI.

Observed Response:
Starting Web Requests (5 Hosts)
Attempting to screenshot https://www.kali.org
Attempting to screenshot https://www.kali.org/docs
Attempting to screenshot https://www.kali.org/tools
Attempting to screenshot https://www.exploit-db.com
Attempting to screenshot https://www.offsec.com
Finished in 14.1417660713 seconds

[*] Done! Report written in the /usr/share/eyewitness/screens folder!
Would you like to open the report now? [Y/n] Y

Interpretation:
EyeWitness visited each URL, captured screenshots and metadata, and saved a browsable HTML report in the specified output directory.

â¸»

5) Practical Workflow

Step 1: Install EyeWitness
sudo apt update
sudo apt install eyewitness

Step 2: Prepare input file
# add one URL per line
echo "https://target.com" >> urls.txt

Step 3: Run EyeWitness (headless, save to output folder)
eyewitness -f urls.txt -d output --headless

Step 4: Open report
# open output/report.html in a browser

Step 5 (Optional): Advanced usage
â€¢ Single URL:
eyewitness --single https://target.com -d out

â€¢ Increase timeout for slow pages:
eyewitness -f urls.txt -d out --timeout 20

â€¢ Use multiple threads:
eyewitness -f urls.txt -d out --threads 10

â€¢ Show browser window for debugging:
eyewitness -f urls.txt -d out --show-selenium

â€¢ Use proxy:
eyewitness -f urls.txt -d out --proxy-ip 127.0.0.1 --proxy-port 8080 --proxy-type socks5

â¸»

6) Limitations
â€¢ Resource usage: Multiple threads launch browser instances and consume significant CPU/RAM.
â€¢ Dependency on geckodriver + Firefox: version mismatches can cause failures.
â€¢ JavaScript-heavy pages may require increased --delay/--timeout to render properly.
â€¢ Can trigger IDS/IPS when scanning many external hosts.
â€¢ Not a vulnerability scanner; it provides screenshots and metadata only.

â¸»

7) Summary
â€¢ What: Automated web screenshot and reporting tool (Selenium + geckodriver).
â€¢ Why: For efficient visual reconnaissance, auditing, and reporting.
â€¢ How: Read input â†’ Render pages â†’ Capture screenshots and headers â†’ Generate HTML report.
â€¢ Use Case: Captured screenshots for a list of websites and produced a browsable report in the output folder.
