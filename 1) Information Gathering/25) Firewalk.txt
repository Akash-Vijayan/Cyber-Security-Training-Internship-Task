âœ… Acknowledgement: Firewalk â€“ Kali Linux

ðŸ”— Official tool page: https://www.kali.org/tools/firewalk

â¸»

1) What is Firewalk?
Firewalk is an active network reconnaissance utility in Kali Linux designed to determine which layerâ€‘4 protocols (TCP/UDP ports) a packetâ€‘filtering gateway (firewall/router) will forward to downstream networks. 
It uses TTLâ€‘based probing (similar to traceroute) to send packets that expire just past the gateway; responses (or lack thereof) reveal whether specific ports/protocols are allowed through the gateway's ACLs.

Firewalk is primarily used during network security assessments and penetration tests to map firewall rules and find allowed traffic that may lead to further exploitation.

â¸»

2) Why use Firewalk?
â€¢ Firewall Rule Discovery â†’ Identify which ports/protocols a gateway will forward to downstream hosts.  
â€¢ Mapping Network Defenses â†’ Understand filtering policies implemented on routers/firewalls.  
â€¢ Pre-Attack Recon â†’ Find permissible paths/protocols for later exploitation or service access.  
â€¢ Verification â†’ Check if configuration changes to ACLs are behaving as expected.

â¸»

3) How does Firewalk work?
1. Determines the gateway hop count using a ramping phase (like traceroute).  
2. Sends packets with TTL set to one greater than the gateway hop so they expire past the gateway.  
3. If intermediary gateways forward the packet, the next hop will send an ICMP_TIME_EXCEEDED message (or a TCP/UDP response), indicating the packet was forwarded.  
4. If the gateway drops the packet (due to ACLs), there will be no response â€” indicating the gateway likely blocks that port/protocol.  
5. Firewalk repeats this for specified port ranges or vectors to build a map of allowed/blocked layerâ€‘4 traffic.

Note: The destination host does not have to be reachable; it only needs to exist beyond the gateway so the forwarded packets expire at the next hop and produce responses.

â¸»

4) Exact Use Case (Lab Example)

Context:
- Scanning ports 8079-8081 via interface eth0, use TCP, do not resolve hostnames.
- Gateway (target forwarder): 192.168.1.1
- Destination metric (downstream host used for TTL metric): 192.168.0.1

Command:
firewalk -S8079-8081 -i eth0 -n -pTCP 192.168.1.1 192.168.0.1

Flags explained:
â€¢ -Sx-y,z â†’ Port range to scan (example: -S8079-8081).  
â€¢ -i device â†’ Network interface to use (example: eth0).  
â€¢ -n â†’ Do not resolve IP addresses to hostnames (faster/less noisy).  
â€¢ -p TCP|UDP â†’ Protocol to test (TCP or UDP).  
â€¢ target_gateway â†’ The forwarding gateway IP to test (example: 192.168.1.1).  
â€¢ metric (destination) â†’ A downstream IP used to set TTL so packets expire after the gateway (example: 192.168.0.1).  
â€¢ -s â†’ Source port (optional, for ramping).  
â€¢ -T â†’ Read timeout in ms.  
â€¢ -t â†’ IP TTL start value.  
â€¢ -x â†’ Expire vector (1-8).

Observed Response (example):
Firewalk 5.0 [gateway ACL scanner]
Firewalk state initialization completed successfully.
TCP-based scan.
Ramping phase source port: 53, destination port: 33434
Hotfoot through 192.168.1.1 using 192.168.0.1 as a metric.
Ramping Phase:
 1 (TTL  1): expired [192.168.1.1]
Binding host reached.
Scan bound at 2 hops.
Scanning Phase:
port 8079: *no response*
port 8080: A! open (port not listen) [192.168.0.1]
port 8081: *no response*

Scan completed successfully.

Interpretation:
- Ports with "*no response*" were likely dropped by the gateway (filtered).  
- A response like "A! open (port not listen)" indicates the gateway forwarded the probe and the downstream host generated a response â€” meaning that port/protocol is allowed through the gateway.  
- Firewalk provides totals (packets sent, ports scanned, ports open) to summarise the scan.

â¸»

5) Practical Workflow

Step 1: Install Firewalk
sudo apt update
sudo apt install firewalk

Step 2: Choose a downstream metric host (an IP beyond the gateway)
# Ideally a host that will exist/passively reply with ICMP TTL expired when packets expire on the downstream hop.

Step 3: Run a basic scan (example)
firewalk -S1-1024 -i eth0 -n -pTCP 192.168.1.1 192.168.0.1

Step 4: Analyze results
- Note ports that returned responses vs no responses.
- Correlate findings with firewall ACL configurations and perform controlled follow-up testing.

Step 5 (Optional): Tune scanning parameters
â€¢ Use -T to reduce/increase packet read timeout.
â€¢ Use -s to set source port for ramping phase.
â€¢ Use -t and -x to adjust TTL behavior and expire vectors.
â€¢ Limit port ranges with -S to focus on areas of interest.

Step 6: Export/save output
# Redirect output to a file for reporting
firewalk -S8079-8081 -i eth0 -n -pTCP 192.168.1.1 192.168.0.1 | tee firewalk_output.txt

â¸»

6) Limitations
â€¢ Requires a downstream host beyond the gateway to produce TTL expiry responses.  
â€¢ Heavily dependent on ICMP behavior â€” some networks rate-limit or block ICMP_TIME_EXCEEDED messages, reducing accuracy.  
â€¢ Modern firewalls may implement stateful inspection that behaves differently than simple ACLs, complicating interpretation.  
â€¢ Can be noisy â€” may trigger IDS/IPS or firewall logging.  
â€¢ Not a port scanner replacement â€” it only determines whether traffic is forwarded by a gateway, not open services on the final host.  
â€¢ Legal/Ethical: Only run against networks you own or have explicit permission to test.

â¸»

7) Summary
â€¢ What: Active TTL-based gateway ACL discovery tool to identify which layerâ€‘4 protocols/ports are forwarded by a gateway.  
â€¢ Why: Helps map firewall rules and discover allowed paths for later exploitation or testing.  
â€¢ How: Ramping/TLL probing â†’ send packets that expire past the gateway â†’ observe responses or lack thereof to infer filtering.  
â€¢ Use Case: Scanned ports 8079-8081 through gateway 192.168.1.1 using metric 192.168.0.1 and discovered which ports were forwarded vs filtered.
